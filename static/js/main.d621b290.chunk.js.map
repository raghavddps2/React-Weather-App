{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","className","city","country","temperature","humidity","description","error","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","this","components_Titles","components_Form","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d621b290.chunk.js","sourcesContent":["import React from \"react\"\r\nconst Titles =() => (\r\n    <div>\r\n    <h1>Weather Finder</h1>\r\n    <p>Find out temperature, conditions and more </p>\r\n</div>\r\n)\r\n/*class Titles extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Weather Finder</h1>\r\n                <p>Find out temperature, conditions and more </p>\r\n            </div>\r\n        )\r\n    }\r\n}*/\r\n\r\nexport default Titles;","import React from \"react\";\r\nconst Form = props =>(\r\n    <div>\r\n    <form onSubmit={props.getWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"city...\"/>\r\n        <input type=\"text\" name=\"country\" placeholder=\"country...\"/>\r\n        <button>Get weather</button>\r\n    </form>\r\n</div>\r\n)\r\n/*class Form extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.props.getWeather}>\r\n                    <input type=\"text\" name=\"city\" placeholder=\"city...\"/>\r\n                    <input type=\"text\" name=\"country\" placeholder=\"country...\"/>\r\n                    <button>Get weather</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}*/\r\nexport default Form;\r\n\r\n/*\r\n    Now how do we actuallly make sure that when a certain button is clicked the async await function gets called. This is done with the help \r\n    of something called as prompts.\r\n\r\n\r\n*/","import React from \"react\";\r\nconst Weather = props =>(\r\n        <div className=\"weather__info\">\r\n        \r\n            {\r\n                props.city && props.country && \r\n                    <p className=\"weather__key\">Location: \r\n                        <span className=\"weather__value\"> {props.city}, {props.country}</span>\r\n                    </p>\r\n            }\r\n            {\r\n                props.temperature && <p className=\"weather__key\">  Temperature: <span className=\"weather__value\">{props.temperature}</span></p> \r\n            }  \r\n            {\r\n                props.humidity && <p className=\"weather__key\">Humidity: <span className=\"weather__value\"> {props.humidity}</span></p>  \r\n            }  \r\n            {\r\n                props.description && <p className=\"weather__key\">Description: <span className=\"weather__value\"> {props.description}</span></p>  \r\n            }\r\n            {\r\n                props.error && <p className=\"weather__error\">Error: <span className=\"weather__value\">{props.error}</span></p>  \r\n            }               \r\n\r\n        </div>\r\n    );\r\n\r\n/*class Weather extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n            {this.props.city && this.props.country && <p>Location: {this.props.city}, {this.props.country}</p>}\r\n            {this.props.temperature && <p>  Temperature: {this.props.temperature}</p> }  \r\n            {this.props.humidity && <p>Humidity:  {this.props.humidity}</p>  }  \r\n            {this.props.description && <p>Description: {this.props.description}</p>  }\r\n            {this.props.error && <p>Error: {this.props.error}</p>  }               \r\n\r\n            </div>\r\n        )\r\n    }\r\n}*/\r\nexport default Weather;\r\n\r\n/* {this.props.city && this.props.country && <p>Location: {this.props.city}, {this.props.country}</p>}\r\n                {this.props.temperature && <p>  Temperature: {this.props.temperature}</p> }  \r\n                {this.props.humidity && <p>Humidity:  {this.props.humidity}</p>  }  \r\n                {this.props.description && <p>Description: (this.props.description)</p>  }  */","import React from \"react\"; //This statement imports react from the react object!\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\n//const API_KEY = \"7921124a7a140b113d4142db0d1c7976\"\nclass App extends React.Component {\n  state ={\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    description: undefined,\n    error: undefined\n  }\n  getWeather = async (e) =>{\n    e.preventDefault();\n    const city= e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&mode=json&appid=7921124a7a140b113d4142db0d1c7976&units=metric`);\n  /*\n    Now we wanna convert the data we get into JSON, so that it can be read from the api.\n    States arre something that keeps track ofthe change of data.\n  \n    */\n\n\n const data = await api_call.json();\n    if(country && city){\n  console.log(data);\n this.setState({\n   temperature: data.main.temp,\n   city: data.name,\n   country: data.sys.country,\n   humidity: data.main.humidity,\n   description: data.weather[0].description,\n   error: \"Absolutely No Error!\"\n });\n  }\n  else{\n    console.log(data);\n    this.setState({\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: \"Please enter the value.\"\n    });\n  }\n}\n\n/*else{\n  this.setState({\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: \"Please Enter the country and date.\"\n  });\n}*/\n    /*\n      Arrow function allow you too use the this keyword independently. This indicated that it is bound to that \n      component\n\n\n      getWeather is a prop.\n    */\n   \n  render(){\n    return(\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles/>\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                <Form getWeather={this.getWeather}/>\n                  <Weather \n                    temperature={this.state.temperature}\n                    city = {this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description = {this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n          \n        </div>\n        <h3 className=\" footer panel panel-heading \">Copyright ©: Raghav Maheshwari</h3>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n/*\n  Class keword is a keyword in javascript and then we have the name and that extends the React.Component!\n  render() is a built in react method and it returns something called as JSX. Whta we wrote after return looks like HTML but its not html and bable behind\n  the scenes convert this into Javascript that the browsers can understand!\n  Make sure that you have only one parent element or one div\n  The export statement here is exporting the applicatooon file.\n\n  The purpose of react is to have multiple files that contain the UI code and so that you  can import {  } from \"that filw into one singkle\n  fiile and that import.html is what wesee in the browser.\";\n  */\n\n /* import React from \"react\";\n  class App extends React.Component{\n    render(){\n      return(\n        <div>\n          <p>Hello!</p>\n          <h1>Hey!</h1>\n        </div>\n      );\n    }\n  }*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n/*\n    Whta this odes is it renders out <App/> to the root view of getElementById\n*/\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}